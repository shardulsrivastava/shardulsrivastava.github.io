I"?r<p>Canary deployment is a way of deploying the application in a phased manner. In this pattern, we deploy a new version of the application alongside the production version, then rollout the change to a small subset of servers. 
Once new version of the application is tested by the real users, then rollout the change out to the rest of the servers.</p>

<p>Canary deployments can be complex and involve testing in production and manual verification.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlo7w0fwc5iwyza1e36d.png" alt="canary-release" /></p>

<p>To demonstrate Canary deployments, we will setup an EKS cluster, install Istio, deploy sample application and setup canary release of new version of application.</p>

<p>you can follow the steps below or use the script <a href="https://github.com/shardulsrivastava/eks-istio-canary/blob/main/auto/setup-cluster">here</a>.</p>

<h4 id="setup-eks-cluster">Setup EKS Cluster</h4>

<p>Setup an EKS cluster of version <code class="language-html highlighter-rouge">1.21</code> in <code class="language-html highlighter-rouge">us-east-1</code> region with a managed node group <code class="language-html highlighter-rouge">default-pool</code> of machine type <code class="language-html highlighter-rouge">t3a-medium</code>.</p>

<ol>
  <li>
    <p>Download and install the latest version of <code class="language-html highlighter-rouge">eksctl</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--silent</span> <span class="nt">--location</span> <span class="s2">"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-s</span><span class="si">)</span><span class="s2">_amd64.tar.gz"</span> | <span class="nb">tar </span>xz <span class="nt">-C</span> /tmp
<span class="nb">sudo mv</span> /tmp/eksctl /usr/local/bin
</code></pre></div>    </div>
    <p>for Mac and other operating systems, follow the steps <a href="https://eksctl.io/introduction/#installation">here</a>.</p>
  </li>
  <li>Create EKS cluster
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eksctl create cluster <span class="nt">--name</span> canary-cluster <span class="se">\</span>
       <span class="nt">--version</span> 1.21 <span class="se">\</span>
       <span class="nt">--region</span> us-east-1 <span class="se">\</span>
       <span class="nt">--nodegroup-name</span> default-pool <span class="se">\</span>
       <span class="nt">--node-type</span> t3a.medium <span class="se">\</span>
       <span class="nt">--nodes</span> 3 <span class="se">\</span>
       <span class="nt">--nodes-min</span> 0 <span class="se">\</span>
       <span class="nt">--nodes-max</span> 4 <span class="se">\</span>
       <span class="nt">--managed</span>
</code></pre></div>    </div>
    <p>Once the Control plane is ready, you should see the output like this</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2021-08-13 23:59:52 <span class="o">[</span>ℹ]  waiting <span class="k">for </span>the control plane availability...
2021-08-13 23:59:52 <span class="o">[</span>✔]  saved kubeconfig as <span class="s2">"/Users/shardulsrivastava/.kube/config"</span>
2021-08-13 23:59:52 <span class="o">[</span>ℹ]  no tasks
2021-08-13 23:59:52 <span class="o">[</span>✔]  all EKS cluster resources <span class="k">for</span> <span class="s2">"canary-cluster"</span> have been created
2021-08-14 00:01:57 <span class="o">[</span>ℹ]  kubectl <span class="nb">command </span>should work with <span class="s2">"/Users/shardulsrivastava/.kube/config"</span>, try <span class="s1">'kubectl get nodes'</span>
2021-08-14 00:01:57 <span class="o">[</span>✔]  EKS cluster <span class="s2">"canary-cluster"</span> <span class="k">in</span> <span class="s2">"us-east-1"</span> region is ready
</code></pre></div>    </div>
    <p>Note: You would need a minimum of <a href="https://eksctl.io/usage/minimum-iam-policies/">these permissions</a> to run the eksctl commands above.</p>
  </li>
  <li>
    <p>Download and install <code class="language-html highlighter-rouge">kubectl</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LO</span> <span class="s2">"https://dl.k8s.io/release/</span><span class="si">$(</span>curl <span class="nt">-L</span> <span class="nt">-s</span> https://dl.k8s.io/release/stable.txt<span class="si">)</span><span class="s2">/bin/linux/amd64/kubectl"</span>
<span class="nb">sudo install</span> <span class="nt">-o</span> root <span class="nt">-g</span> root <span class="nt">-m</span> 0755 kubectl /usr/local/bin/kubectl
</code></pre></div>    </div>
  </li>
  <li>
    <p>Check the pods running in cluster:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-A</span>
</code></pre></div>    </div>

    <p>At this point, your cluster would have only the <code class="language-html highlighter-rouge">core-dns</code>, <code class="language-html highlighter-rouge">kube-proxy</code>, and <code class="language-html highlighter-rouge">amazon-vpc-cni</code> plugins.</p>

    <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pb71izuokju0bvtyt5p.png" alt="eks-cluster" /></p>
  </li>
</ol>

<h4 id="setup-istio">Setup Istio</h4>

<p>Istio provides a convenient binary <code class="language-html highlighter-rouge">istioctl</code> to set up and interact with Istio components.</p>

<ol>
  <li>
    <p>Install <code class="language-html highlighter-rouge">istioctl</code> and if you’re running these commands from an ec2 instance, add the installation directory to system path:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> https://istio.io/downloadIstio | sh -
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:/home/ec2-user/istio-1.11.0/bin"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Istio has multiple configuration <a href="https://istio.io/latest/docs/setup/additional-setup/config-profiles/">profiles</a>, these profiles provide customization of the Istio control plane and of the sidecars for the Istio data plane.
<code class="language-html highlighter-rouge">default</code> profile is recommended for production deployments.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>istioctl <span class="nb">install</span> <span class="nt">--set</span> <span class="nv">profile</span><span class="o">=</span>default <span class="nt">-y</span>
</code></pre></div>    </div>

    <p>alternatively, you can also take the dump of the manifests and apply using kubectl:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> istioctl manifest generate <span class="nt">--set</span> <span class="nv">profile</span><span class="o">=</span>default <span class="o">&gt;</span> generated-manifest.yaml
 kubectl apply <span class="nt">-f</span> generated-manifest.yaml
</code></pre></div>    </div>

    <p>Once installed, you should see the output like this for a successful installation.</p>

    <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wc5pk2vn1ura373qt5r.png" alt="istioctl-output" /></p>

    <p>Note: If you get the below error, you should check the instance type you are using as there is a limit to the number of pods that can be scheduled on the node based on the node’s instance type. See <a href="https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt">here</a> for the list of instance types and the max pods.</p>

    <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xqhm7lhc7fsb8bzrkr7.png" alt="istioctl-error" /></p>
  </li>
  <li>
    <p>Istio injects a <a href="https://github.com/envoyproxy/envoy">envoy proxy</a> side-car container to the pods to intercept traffic from pods, this behavior is enabled using label <code class="language-html highlighter-rouge">istio-injection=enabled</code> on the namespace level and <code class="language-html highlighter-rouge">sidecar.istio.io/inject=true</code> on the pod level.</p>

    <p>Add this label to the <code class="language-html highlighter-rouge">default</code> namespace to instruct Istio to automatically inject Envoy sidecar proxies.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl label namespace default istio-injection<span class="o">=</span>enabled
</code></pre></div>    </div>

    <p>Read more about Istio side-car injection <a href="https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/">here</a>.</p>
  </li>
  <li>
    <p>Install <code class="language-html highlighter-rouge">Kiali</code>, <code class="language-html highlighter-rouge">Prometheus</code> and <code class="language-html highlighter-rouge">Grafana</code> to monitor and visualize mesh</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/istio/istio/1.10.3/samples/addons/prometheus.yaml
kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/istio/istio/1.10.3/samples/addons/grafana.yaml
kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/istio/istio/1.10.3/samples/addons/kiali.yaml
</code></pre></div>    </div>

    <p>Note: If you get an error like this <code class="language-html highlighter-rouge">unable to recognize "https://raw.githubusercontent.com/istio/istio/1.10.3/samples/addons/kiali.yaml": no matches for kind "MonitoringDashboard" in version "monitoring.kiali.io/v1alpha1"</code>, then re-run the command:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/istio/istio/1.10.3/samples/addons/kiali.yaml
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="setup-sample-application">Setup sample application</h4>

<p>To demonstrate how canary deployment works, let’s set up version <code class="language-html highlighter-rouge">v1</code> of an Nginx-based sample application and set up a service to expose it at port <code class="language-html highlighter-rouge">80</code>.</p>

<ol>
  <li>
    <p>Deploy <code class="language-html highlighter-rouge">v1</code> vesion of sample application :</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-v1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/shardul/nginx:v1</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-v1</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
          <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
        <span class="na">livenessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
        <span class="na">readinessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Expose the application as a service:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Setup a test pod to test the connectivity to the nginx service :</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run <span class="nt">-it</span> test-connection <span class="nt">--image</span><span class="o">=</span>radial/busyboxplus:curl <span class="nt">--</span> sh
<span class="o">[</span> root@test-connection:/ <span class="o">]</span><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>curl nginx <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="p">;</span> <span class="k">done
</span>You<span class="s1">'re at the root of nginx server v1
You'</span>re at the root of nginx server v1
You<span class="s1">'re at the root of nginx server v1
You'</span>re at the root of nginx server v1
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="canary-deployment-with-istio">Canary Deployment with Istio</h4>

<p>With Istio, traffic routing and replica deployment are totally independent of each other. Istio <a href="https://istio.io/latest/docs/concepts/traffic-management/#routing-rules">routing rules</a> provide fine-grained control over how to route traffic based on <code class="language-html highlighter-rouge">host</code>, <code class="language-html highlighter-rouge">port</code>, <code class="language-html highlighter-rouge">headers</code>, <code class="language-html highlighter-rouge">uri</code>, <code class="language-html highlighter-rouge">method</code>, <code class="language-html highlighter-rouge">source labels</code> and control the distribution of traffic.</p>

<ol>
  <li>
    <p>Deploy another version <code class="language-html highlighter-rouge">v2</code> of the same application that uses image <code class="language-html highlighter-rouge">quay.io/shardul/nginx:v2</code>.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-v2</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/shardul/nginx:v2</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-v2</span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
          <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
        <span class="na">livenessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
        <span class="na">readinessProbe</span><span class="pi">:</span>
          <span class="na">httpGet</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
            <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div>    </div>

    <p>Once the <code class="language-html highlighter-rouge">v2</code> version is deployed, when we hit the service again, we would get the below output :</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">exec</span> <span class="nt">-it</span> test-connection <span class="nt">--</span> sh
<span class="o">[</span> root@test-connection:/ <span class="o">]</span><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>curl nginx <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="p">;</span> <span class="k">done
</span>You<span class="s1">'re at the root of nginx server v2
You'</span>re at the root of nginx server v2
You<span class="s1">'re at the root of nginx server v1
You'</span>re at the root of nginx server v1
You<span class="s1">'re at the root of nginx server v2
You'</span>re at the root of nginx server v1
You<span class="s1">'re at the root of nginx server v1
You'</span>re at the root of nginx server v2
</code></pre></div>    </div>

    <p>Since there are two deployments with different versions exposed from the same service, whenever you hit the service, it will hit the different versions of the application in a round-robin manner and hence this output.</p>
  </li>
  <li>
    <p><a href="https://istio.io/latest/docs/reference/config/networking/gateway/">Istio Gateway</a> acts as a load balancer receiving incoming and outgoing HTTP/TCP connections and it’s bound to the <code class="language-html highlighter-rouge">istio-ingressgateway</code> resource created during installation as a <code class="language-html highlighter-rouge">LoadBalancer</code> service.</p>

    <p>Setup a <code class="language-html highlighter-rouge">default-gateway</code> for all the incoming traffic on port <code class="language-html highlighter-rouge">80</code> :</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Gateway</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default-gateway</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">istio</span><span class="pi">:</span> <span class="s">ingressgateway</span>
  <span class="na">servers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">*'</span>
    <span class="na">port</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
      <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">HTTP</span>
</code></pre></div>    </div>

    <p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ek9snqayacgiz0s5w14.png" alt="istio-ingressgateway" /></p>
  </li>
  <li>
    <p><a href="https://istio.io/latest/docs/reference/config/networking/destination-rule/">Destination Rule</a> allows you to define <a href="https://istio.io/latest/docs/reference/config/networking/destination-rule/#Subset">subsets</a> of an application based on a set of labels. For example, we have deployed two subsets <code class="language-html highlighter-rouge">v1</code> and <code class="language-html highlighter-rouge">v2</code> of an application, and they are identified by the label <code class="language-html highlighter-rouge">version</code>.</p>

    <p>Setup a DestinationRule <code class="language-html highlighter-rouge">nginx-dest-rule</code> to define two subsets <code class="language-html highlighter-rouge">v1</code> and <code class="language-html highlighter-rouge">v2</code>:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">DestinationRule</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-dest-rule</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">subsets</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">v2</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><a href="https://istio.io/latest/docs/reference/config/networking/virtual-service/">Virtual Service</a> acts just like an Ingress resource and matches traffic and directs it to a service based on the HTTP routing rules.</p>

    <p>It can operate on internal as well as external service and can match traffic based on HTTP host, path (with full regular expression support), method, headers, ports, query parameters.</p>

    <p>Setup a VirtualService <code class="language-html highlighter-rouge">nginx-virtual-svc</code> for host <code class="language-html highlighter-rouge">nginx</code> that receives the incoming traffic on <code class="language-html highlighter-rouge">default-gateway</code> and routes 90% of the traffic to the subset <code class="language-html highlighter-rouge">v1</code> and 10% to subset <code class="language-html highlighter-rouge">v2</code> defined in <code class="language-html highlighter-rouge">nginx-dest-rule</code>.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualService</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-virtual-svc</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">nginx</span>
  <span class="na">gateways</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">istio-system/default-gateway</span>
  <span class="na">http</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">route</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">subset</span><span class="pi">:</span> <span class="s">v1</span>
      <span class="na">weight</span><span class="pi">:</span> <span class="m">90</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">subset</span><span class="pi">:</span> <span class="s">v2</span>
      <span class="na">weight</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>After applying, <code class="language-html highlighter-rouge">90%</code> of the traffic will be routed to version <code class="language-html highlighter-rouge">v1</code> and <code class="language-html highlighter-rouge">10%</code> to <code class="language-html highlighter-rouge">v2</code> of the <code class="language-html highlighter-rouge">nginx</code> service. Access the nginx service via <code class="language-html highlighter-rouge">istio-ingressgateway</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">exec</span> <span class="nt">-it</span> test-connection <span class="nt">--</span> sh
<span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>curl <span class="nt">-H</span> <span class="s2">"Host: nginx"</span> istio-ingressgateway.istio-system <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>
<p>We can visualize the traffic flow using the Kiali dashboard:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>istioctl dashboard kiali
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yjm6y5gbcoyonzplrps.png" alt="istio-canary-routing" /></p>

<p>In production, after testing the <code class="language-html highlighter-rouge">canary version</code> to ensure that it’s working fine, we can update the VirtualService to route 100% of the traffic to this version and rollout the newer version for all the users.</p>

:ET