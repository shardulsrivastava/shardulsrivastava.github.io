I"&§<p>If you use EKS then you have found yourself in a situation where a user canâ€™t access the cluster despite having all the IAM permissions and gets an <code class="language-html highlighter-rouge">Unauthorized</code> message like <a href="https://friends.fandom.com/wiki/Eddie_Menuek">Eddie</a> here.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpykbg9lncvvkmduyp9b.jpeg" alt="eddie-locked" /></p>

<p>AWS EKS uses <code class="language-html highlighter-rouge">IAM credentials</code> for <code class="language-html highlighter-rouge">authentication</code> and <code class="language-html highlighter-rouge">Kubernetes RBAC</code> for <code class="language-html highlighter-rouge">authorization</code>. As per <a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-auth.html">EKS docs</a>:</p>
<blockquote>
  <p><code class="language-html highlighter-rouge">EKS uses IAM permissions for authentication of valid entities such IAM users or roles. All the permissions for interacting with the EKS cluster is managed through Kubernetes RBAC</code></p>
</blockquote>

<p>or simply put, EKS doesnâ€™t work the same way as other services such as S3 where if you have <code class="language-html highlighter-rouge">AmazonS3FullAccess</code>, you can access any S3 bucket and create or delete files/folders. In EKS, IAM permissions are only used to check if the user has valid IAM credentials and permissions to run any command using <code class="language-html highlighter-rouge">kubectl</code> such as <code class="language-html highlighter-rouge">kubectl get pods</code> is managed by Kubernetes API that uses <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">RBAC</a> to control the access.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q70jx5gnhh9s4wrj27jc.png" alt="aws-eks-auth" /></p>

<p>By default, the <code class="language-html highlighter-rouge">IAM Role</code> or <code class="language-html highlighter-rouge">IAM User</code> that was used to create the cluster, is added to the <code class="language-html highlighter-rouge">system:masters</code> group and gets cluster-wide admin permission with <code class="language-html highlighter-rouge">cluster-admin</code> ClusterRole.</p>

<p>As per <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles">Kubernetes documentation</a> <code class="language-html highlighter-rouge">system:masters</code> group is one of the <code class="language-html highlighter-rouge">default</code> ClusterRoleBindings available in the Kubernetes cluster, itâ€™s attached to the <code class="language-html highlighter-rouge">cluster-admin</code> ClusterRole that gives the user admin permissions in the cluster.</p>

<style>
table {
  font-family: Merriweather;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}
</style>

<table>
  <thead>
    <tr>
      <th>Default ClusterRole</th>
      <th>Default ClusterRoleBinding</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>cluster-admin</td>
      <td>system:masters  group</td>
      <td>Allows super-user access to perform any action on any resource.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1hm3xhl2kugcp747tid.jpeg" alt="unlimited-power" /></p>

<p><strong>Note:</strong> This mapping of creator IAM User or Role to <code class="language-html highlighter-rouge">system:masters</code> group is not visible in any configuration such as <code class="language-html highlighter-rouge">aws-auth</code> configmap.</p>

<p>EKS allows giving access to other users by adding them in a configmap <code class="language-html highlighter-rouge">aws-auth</code> in <code class="language-html highlighter-rouge">kube-system</code> namespace. By default, this configmap is empty. However, If you are using <code class="language-html highlighter-rouge">eksctl</code> to create the cluster, this config map will have the role created by <code class="language-html highlighter-rouge">eksctl</code> for the node group and this role is attached to the <code class="language-html highlighter-rouge">system:bootstrappers</code> and <code class="language-html highlighter-rouge">system:nodes</code> groups.</p>

<p><code class="language-html highlighter-rouge">aws-auth</code> configmap is based on <a href="https://github.com/kubernetes-sigs/aws-iam-authenticator">aws-iam-authenticator</a> and has several configuration options:</p>

<ol>
  <li><strong>mapRoles</strong></li>
  <li><strong>mapUsers</strong></li>
  <li><strong>mapAccounts</strong></li>
</ol>

<h2 id="using-maproles-to-map-an-iam-role-to-the-cluster">Using mapRoles to Map an IAM Role to the Cluster</h2>

<p><code class="language-html highlighter-rouge">mapRoles</code> allows mapping an <code class="language-html highlighter-rouge">IAM role</code> in the cluster to allow any entity or user assuming that role to access the cluster. After mapping an IAM role with <code class="language-html highlighter-rouge">mapRoles</code>, any user or entity assuming this role is allowed to access the cluster, However, the level of access is defined by the <code class="language-html highlighter-rouge">groups</code> attribute.</p>

<p><code class="language-html highlighter-rouge">mapRoles</code> has three attributes:</p>

<ol>
  <li><strong>rolearn</strong> - IAM Role ARN to map to EKS cluster.</li>
  <li><strong>username</strong> - Username for the IAM Role to map in Kubernetes, this could be a static value like <code class="language-html highlighter-rouge">eks-developer</code> or <code class="language-html highlighter-rouge">ci-account</code> or a templated variable like <code class="language-html highlighter-rouge">{{AccountID}}/{{SessionName}}/{{EC2PrivateDNSName}}</code> or both. This value would be printed in the <code class="language-html highlighter-rouge">aws-authenticator</code> Cloudwatch logs if logging is enabled.</li>
  <li><strong>groups</strong> - List of Kubernetes groups that are defined in <code class="language-html highlighter-rouge">ClusterRoleBinding/RoleBinding</code>. Example</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">subjects</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">Group</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">my-group"</span>
    <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div></div>

<p>Letâ€™s create two IAM roles <code class="language-html highlighter-rouge">eks-admin</code> and <code class="language-html highlighter-rouge">eks-dev</code> and assume the <code class="language-html highlighter-rouge">eks-admin</code> role to create a cluster with one node group:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">eksctl.io/v1alpha5</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterConfig</span>

<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">iam-auth-cluster</span>
  <span class="na">region</span><span class="pi">:</span> <span class="s">us-east-1</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1.21"</span>

<span class="na">availabilityZones</span><span class="pi">:</span> 
  <span class="pi">-</span> <span class="s">us-east-1a</span>
  <span class="pi">-</span> <span class="s">us-east-1b</span>
  <span class="pi">-</span> <span class="s">us-east-1c</span>

<span class="na">cloudWatch</span><span class="pi">:</span>
  <span class="na">clusterLogging</span><span class="pi">:</span>
    <span class="na">enableTypes</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">authenticator"</span><span class="pi">]</span>

<span class="na">managedNodeGroups</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">managed-ng-1</span>
    <span class="na">instanceType</span><span class="pi">:</span> <span class="s">t2.micro</span>
    <span class="na">minSize</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">maxSize</span><span class="pi">:</span> <span class="m">4</span>
    <span class="na">desiredCapacity</span><span class="pi">:</span> <span class="m">4</span>
</code></pre></div></div>

<p>Once created, this cluster would have one NodeGroup and the IAM role associated with this node group would be added to the <code class="language-html highlighter-rouge">aws-auth</code> configmap.</p>

<p>Check the contents of <code class="language-html highlighter-rouge">aws-auth</code> configMap :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get configmap aws-auth <span class="nt">-n</span> kube-system <span class="nt">-oyaml</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">mapRoles</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">- groups:</span>
      <span class="s">- system:bootstrappers</span>
      <span class="s">- system:nodes</span>
      <span class="s">rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eksctl-iam-auth-cluster-nodegroup-NodeInstanceRole-1RNKIEA50ZD0B</span>
      <span class="s">username: system:node:{{EC2PrivateDNSName}}</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">aws-auth</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
</code></pre></div></div>

<p>By default, only <code class="language-html highlighter-rouge">IAM Role</code> that created the cluster would have access to the cluster, any other IAM Role has to be added separately added in <code class="language-html highlighter-rouge">aws-auth</code>. Letâ€™s try to assume the <code class="language-html highlighter-rouge">eks-developer</code> IAM role and try to access the cluster with that role.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods

error: You must be logged <span class="k">in </span>to the server <span class="o">(</span>Unauthorized<span class="o">)</span>
</code></pre></div></div>

<p>As expected, <code class="language-html highlighter-rouge">eks-developer</code> IAM role would not be allowed access. To allow <code class="language-html highlighter-rouge">eks-developer</code> IAM role access to the cluster, add the mapping in the <code class="language-html highlighter-rouge">aws-auth</code> configMap to map this role to <code class="language-html highlighter-rouge">eks-developer</code> Kubernetes user. We can either directly edit the configMap or use <code class="language-html highlighter-rouge">eksctl</code> to add this mapping:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eksctl create iamidentitymapping <span class="se">\</span>
  <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
  <span class="nt">--region</span> us-east-1 <span class="se">\</span>
  <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer"</span> <span class="se">\</span>
  <span class="nt">--username</span> <span class="s2">"eks-developer"</span>
</code></pre></div></div>

<p>this would create an entry under the <code class="language-html highlighter-rouge">mapRoles</code> section in <code class="language-html highlighter-rouge">aws-auth</code> configMap :</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">mapRoles</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">- groups:</span>
      <span class="s">- system:bootstrappers</span>
      <span class="s">- system:nodes</span>
      <span class="s">rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eksctl-iam-auth-cluster-nodegroup-NodeInstanceRole-1RNKIEA50ZD0B</span>
      <span class="s">username: system:node:{{EC2PrivateDNSName}}</span>

    <span class="s">- rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer</span>
      <span class="s">username: eks-developer</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">aws-auth</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
</code></pre></div></div>

<p>Letâ€™s try again accessing cluster by assuming the <code class="language-html highlighter-rouge">eks-developer</code> IAM role:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods

Error from server <span class="o">(</span>Forbidden<span class="o">)</span>: pods is forbidden: User <span class="s2">"eks-developer"</span> cannot list resource <span class="s2">"pods"</span> <span class="k">in </span>API group <span class="s2">""</span> at the cluster scope
</code></pre></div></div>

<p>This time, we can access the cluster, however not allowed to list pods in the cluster due to not having enough RBAC permissions. RBAC permissions can be assigned to this IAM role in two ways :</p>

<p><strong>1. RBAC permissions with Kubernetes User</strong><br />
<strong>2. RBAC permissions with Kubernetes Groups</strong></p>

<h3 id="rbac-permissions-with-kubernetes-user">RBAC permissions with Kubernetes User</h3>

<p>We can assign RBAC permissions to an IAM role by binding mapped <code class="language-html highlighter-rouge">Kubernetes User</code> in <code class="language-html highlighter-rouge">aws-auth</code> i.e <code class="language-html highlighter-rouge">eks-developer</code> to a <code class="language-html highlighter-rouge">ClusterRole</code>/<code class="language-html highlighter-rouge">Role</code>.</p>

<ol>
  <li>
    <p>Create a <strong>ClusterRole</strong> <code class="language-html highlighter-rouge">eks-developer-cluster-role</code> with permissions to <code class="language-html highlighter-rouge">get</code>, <code class="language-html highlighter-rouge">list</code> or <code class="language-html highlighter-rouge">watch</code> the <code class="language-html highlighter-rouge">pods</code> resources :</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-cluster-role</span>
 <span class="na">rules</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span> <span class="c1"># Pod is part of Core API Group and "" indicates the core API group</span>
     <span class="na">resources</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">pods"</span><span class="pi">]</span> <span class="c1"># pods resource</span>
     <span class="na">verbs</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">get"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">list"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">watch"</span><span class="pi">]</span> <span class="c1"># Allow user to get, list of watch the pods.</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We have mapped IAM role <code class="language-html highlighter-rouge">arn:aws:iam::<span class="nt">&lt;AWS_ACCOUNT_ID&gt;</span>:role/eks-developer</code> to Kubernetes user <code class="language-html highlighter-rouge">eks-developer</code> in <code class="language-html highlighter-rouge">aws-auth</code>, now create a <strong>ClusterRoleBinding</strong> to bind <code class="language-html highlighter-rouge">developer-cluster-role</code> to the Kubernetes user <code class="language-html highlighter-rouge">eks-developer</code>.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-user-cluster-role-binding</span>
 <span class="na">subjects</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">User</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer</span> <span class="c1"># Kubernetes User mapped to the IAM role in aws-auth configmap.</span>
     <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
 <span class="na">roleRef</span><span class="pi">:</span>
   <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-cluster-role</span>
   <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Access the cluster again by assuming the IAM role <code class="language-html highlighter-rouge">eks-developer</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get pods <span class="nt">-A</span>

 NAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE
 kube-system   aws-node-f584p             1/1     Running   0          79m
 kube-system   coredns-66cb55d4f4-8hjj2   1/1     Running   0          91m
 kube-system   coredns-66cb55d4f4-vtf6j   1/1     Running   0          91m
 kube-system   kube-proxy-psjk5           1/1     Running   0          79m
</code></pre></div>    </div>
  </li>
</ol>

<p>and this time it works!!!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqeckq1k61yci21ddmpo.jpeg" alt="baby-yess" /></p>

<p>We can also verify the access granted to the users by checking the <code class="language-html highlighter-rouge">authenticator</code> logs in Cloudwatch:</p>

<blockquote>
  <p><code class="language-html highlighter-rouge">time="2021-09-13T16:29:14Z" level=info msg="access granted" arn="arn:aws:iam::01755xxxxx:role/eks-developer" client="127.0.0.1:50410" groups="[]" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid="heptio-authenticator-aws:01755xxxxx:AROAQIFUWO66PDOXKSLMQ" username=eks-developer</code></p>
</blockquote>

<h3 id="rbac-permissions-with-kubernetes-groups">RBAC permissions with Kubernetes Groups</h3>

<p>While assigning permissions directly to the Kubernetes User works just fine for most of the use-cases however this approach is not so great if you want to audit who is assuming the IAM role and accessing the cluster and would like additional information captured in the audit logs.</p>

<p>One such use-case is <strong>AWS SSO</strong>, where many users are assigned to a permission set and whenever these users log in using their credentials, they assume the same <code class="language-html highlighter-rouge">IAM role</code>.</p>

<p>We can assign IAM permissions to an IAM role by creating a Kubernetes Group and add it to the <code class="language-html highlighter-rouge">mapRoles.groups</code> field of IAM Role mapping in <code class="language-html highlighter-rouge">aws-auth</code>.</p>

<p>Letâ€™s take the earlier example of the <code class="language-html highlighter-rouge">eks-developer</code> IAM role and create a ClusterRoleBinding with Kubernetes Group <code class="language-html highlighter-rouge">developer</code> bound to <code class="language-html highlighter-rouge">eks-developer-cluster-role</code> and add Kubernetes Group <code class="language-html highlighter-rouge">developer</code> in the mapping of this IAM role in <code class="language-html highlighter-rouge">aws-auth</code>.</p>

<ol>
  <li>
    <p>First delete the earlier ClusterRoleBinding <code class="language-html highlighter-rouge">eks-developer-user-cluster-role-binding</code> :</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl delete clusterrolebindings eks-developer-user-cluster-role-binding
 clusterrolebinding.rbac.authorization.k8s.io <span class="s2">"eks-developer-user-cluster-role-binding"</span> deleted
</code></pre></div>    </div>

    <p>As soon as we delete the <code class="language-html highlighter-rouge">ClusterRolebinding</code>, <code class="language-html highlighter-rouge">eks-developer</code> IAM role wonâ€™t be able to list the pods, letâ€™s check the access by assuming the <code class="language-html highlighter-rouge">eks-developer</code> IAM role :</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> kubectl get pods <span class="nt">-A</span>
 Error from server <span class="o">(</span>Forbidden<span class="o">)</span>: pods is forbidden: User <span class="s2">"eks-developer"</span> cannot list resource <span class="s2">"pods"</span> <span class="k">in </span>API group <span class="s2">""</span> <span class="k">in </span>the namespace <span class="s2">"default"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Delete <strong>IAM Mapping</strong> from <code class="language-html highlighter-rouge">aws-auth</code> :</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> eksctl delete iamidentitymapping <span class="se">\</span>
       <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
       <span class="nt">--region</span> us-east-1 <span class="se">\</span>
       <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create a <strong>ClusterRoleBinding</strong> to bind Kubernetes Group <code class="language-html highlighter-rouge">developer</code> to cluster role <code class="language-html highlighter-rouge">eks-developer-cluster-role</code>:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-group-cluster-role-binding</span>
 <span class="na">subjects</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">Group</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">developer</span>
     <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
 <span class="na">roleRef</span><span class="pi">:</span>
   <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-cluster-role</span>
   <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add Kubernetes Group <code class="language-html highlighter-rouge">developer</code> to IAM role mapping of <code class="language-html highlighter-rouge">eks-developer</code> in <code class="language-html highlighter-rouge">aws-auth</code> and include the session name in username using templated variable <code class="language-html highlighter-rouge">{{SessionName}}</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> eksctl create iamidentitymapping <span class="se">\</span>
   <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
   <span class="nt">--region</span> us-east-1 <span class="se">\</span>
   <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer"</span> <span class="se">\</span>
   <span class="nt">--username</span> <span class="s2">"eks-developer:{{SessionName}}"</span> <span class="se">\</span>
   <span class="nt">--group</span> <span class="s2">"developer"</span>
</code></pre></div>    </div>

    <p>this would create an entry under <code class="language-html highlighter-rouge">mapRoles</code> section in <code class="language-html highlighter-rouge">aws-auth</code> configmap as:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">mapRoles</span><span class="pi">:</span> <span class="pi">|</span>
   <span class="s">- groups:</span>
     <span class="s">- developer</span>
     <span class="s">rolearn: arn:aws:iam::017558828988:role/eks-developer</span>
     <span class="s">username: eks-developer:{{SessionName}}</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Check the Cloudwatch <code class="language-html highlighter-rouge">authenticator</code> logs for the authenticated user assuming <code class="language-html highlighter-rouge">eks-developer</code> IAM role and we can see that this time session name is appended to the username in logs:</p>

<blockquote>
  <p><code class="language-html highlighter-rouge">time="2021-09-13T17:57:46Z" level=info msg="access granted" arn="arn:aws:iam::0175XXXXXXXX:role/eks-developer" client="127.0.0.1:48520" groups="[developer]" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid="heptio-authenticator-aws:0175XXXXXXXX:AROAQIFUWO66PDOXKSLMQ" username="eks-developer:eks-developer-session"</code></p>
</blockquote>

<p>If the session name consists of <code class="language-html highlighter-rouge">@</code>, it would be replaced with <code class="language-html highlighter-rouge">-</code>. Letâ€™s assume the IAM role <code class="language-html highlighter-rouge">eks-developer</code> with session name containing <code class="language-html highlighter-rouge">@</code> :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws sts assume-role <span class="se">\</span>
    <span class="nt">--role-arn</span> <span class="s2">"&lt;IAM_ROLE_ARN&gt;"</span> <span class="se">\</span>
    <span class="nt">--role-session-name</span> <span class="s2">"my-develper-session@123456789"</span> <span class="se">\</span>
    <span class="nt">--duration-seconds</span> 3600
</code></pre></div></div>

<p>Now Cloudwatch logs would have session name printed as <code class="language-html highlighter-rouge">eks-developer:my-developer-session-123456789</code>.</p>

<blockquote>
  <p><code class="language-html highlighter-rouge">time="2021-09-14T17:50:25Z" level=info msg="access granted" arn="arn:aws:iam::017558828988:role/eks-developer" client="127.0.0.1:57794" groups="[developer]" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid="heptio-authenticator-aws:017558828988:AROAQIFUWO66PDOXKSLMQ" username="eks-developer:my-develper-session-123456789"</code></p>
</blockquote>

<p>There is one problem here, if your EKS cluster is being accessed from <strong>multiple AWS accounts</strong>, it would not be possible to track the AWS account of the user who accessed the EKS cluster just by session name.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1k1t6y9yf2462qtwzzq.jpeg" alt="baby-what-now" /></p>

<p><code class="language-html highlighter-rouge">{{AccountID}}</code> comes to the rescue, we can use this templated variable to get the <strong>AWS account ID</strong> of the user who is assuming the role, so we can set the username to :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws:<span class="o">{{</span>AccountID<span class="o">}}</span>:eks-developer:<span class="o">{{</span>SessionName<span class="o">}}</span>
</code></pre></div></div>

<p>Please note that <code class="language-html highlighter-rouge">iamidentitymapping</code> canâ€™t be overridden with <code class="language-html highlighter-rouge">eksctl</code>, so you have to delete it and create it again.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
eksctl delete iamidentitymapping <span class="se">\</span>
      <span class="nt">--cluster</span> <span class="s2">"iam-auth-cluster"</span> <span class="se">\</span>
      <span class="nt">--region</span> <span class="s2">"us-east-1"</span> <span class="se">\</span>
      <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer"</span>

eksctl create iamidentitymapping <span class="se">\</span>
      <span class="nt">--cluster</span> <span class="s2">"iam-auth-cluster"</span> <span class="se">\</span>
      <span class="nt">--region</span> <span class="s2">"us-east-1"</span> <span class="se">\</span>
      <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer"</span> <span class="se">\</span>
      <span class="nt">--username</span> <span class="s2">"aws:{{AccountID}}:eks-developer:{{SessionName}}"</span> <span class="se">\</span>
      <span class="nt">--group</span> <span class="s2">"developer"</span>
</code></pre></div></div>

<p>Now we would get the <code class="language-html highlighter-rouge">AWS Account ID</code> along with <code class="language-html highlighter-rouge">Session Name</code> in cloudwatch logs :</p>

<blockquote>
  <p><code class="language-html highlighter-rouge">time="2021-09-14T18:26:33Z" level=info msg="access granted" arn="arn:aws:iam::017558828988:role/eks-developer" client="127.0.0.1:39752" groups="[developer]" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid="heptio-authenticator-aws:0175XXXXXXXX:AROAQIFUWO66PDOXKSLMQ" username="aws:0175XXXXXXXX:eks-developer:my-develper-session-123456789"</code></p>
</blockquote>

<p><strong>Note: If you want session name in raw format, you can use templated variable <code class="language-html highlighter-rouge">{{SessionNameRaw}}</code> instead. However as of EKS 1.21, these two variables <code class="language-html highlighter-rouge">{{AccessKeyID}}</code> and <code class="language-html highlighter-rouge">{{SessionNameRaw}}</code> donâ€™t work.</strong></p>

<h2 id="using-mapuser-to-map-an-iam-user-to-the-cluster">Using mapUser to Map an IAM User to the Cluster</h2>

<p><code class="language-html highlighter-rouge">mapUsers</code> allows mapping an <code class="language-html highlighter-rouge">IAM User</code> to the cluster and add the user to one or more Kubernetes Groups. It has 3 attributes :</p>

<ol>
  <li><strong>userarn</strong> - ARN of IAM User to map to EKS cluster. This could be an IAM user from the same AWS account or another account.</li>
  <li><strong>username</strong> - Static username to map this IAM User to, in Kubernetes.</li>
  <li><strong>groups</strong> - List of Kubernetes groups that are defined in <code class="language-html highlighter-rouge">ClusterRoleBinding/RoleBinding</code>.</li>
</ol>

<p><strong>Note: Templated variables are not supported in <code class="language-html highlighter-rouge">username</code> field with mapUser.</strong></p>

<p>To add an IAM user with ARN <code class="language-html highlighter-rouge">arn:aws:iam::<span class="nt">&lt;AWS_ACCOUNT_ID&gt;</span>:user/dev-user</code> in <code class="language-html highlighter-rouge">aws-auth</code> configmap, we can run the below command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eksctl create iamidentitymapping <span class="se">\</span>
  <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
  <span class="nt">--region</span> us-east-1 <span class="se">\</span>
  <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user"</span> <span class="se">\</span>
  <span class="nt">--username</span> <span class="s2">"dev-user"</span>
</code></pre></div></div>

<p>this command would add these lines in <code class="language-html highlighter-rouge">aws-auth</code> configMap:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">mapUsers</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">- userarn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user</span>
      <span class="s">username: dev-user</span>
</code></pre></div></div>

<p>Since we didnâ€™t specify any group, <code class="language-html highlighter-rouge">dev-user</code> would be able to authenticate to the cluster, however wouldnâ€™t be able to <code class="language-html highlighter-rouge">list</code> or <code class="language-html highlighter-rouge">get</code> any resources.</p>

<p>For users mapped using <code class="language-html highlighter-rouge">mapUsers</code>, RBAC permission can be given in two ways :</p>

<p><strong>1. RBAC permissions with Kubernetes User</strong><br />
<strong>2. RBAC permissions with Kubernetes Groups</strong></p>

<h3 id="rbac-permissions-with-kubernetes-user-1">RBAC permissions with Kubernetes User</h3>

<p>We can assign RBAC permissions to an <code class="language-html highlighter-rouge">IAM user</code> by binding mapped <code class="language-html highlighter-rouge">Kubernetes User</code> in <code class="language-html highlighter-rouge">aws-auth</code> i.e <code class="language-html highlighter-rouge">dev-user</code> to a <code class="language-html highlighter-rouge">ClusterRole</code>/<code class="language-html highlighter-rouge">Role</code>.</p>

<ol>
  <li>
    <p>Create a <strong>ClusterRoleBinding</strong> to bind Kubernetes user <code class="language-html highlighter-rouge">dev-user</code> to the <code class="language-html highlighter-rouge">developer-cluster-role</code>:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">dev-user-cluster-role-binding</span>
 <span class="na">subjects</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">User</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">dev-user</span> <span class="c1"># Kubernetes User mapped to the IAM user in aws-auth configmap.</span>
     <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
 <span class="na">roleRef</span><span class="pi">:</span>
   <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-cluster-role</span>
   <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Map IAM user <code class="language-html highlighter-rouge">arn:aws:iam::<span class="nt">&lt;AWS_ACCOUNT_ID&gt;</span>:user/dev-user</code> to Kubernetes user <code class="language-html highlighter-rouge">dev-user</code> in <code class="language-html highlighter-rouge">aws-auth</code> configMap:</p>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  eksctl create iamidentitymapping <span class="se">\</span>
    <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
    <span class="nt">--region</span> us-east-1 <span class="se">\</span>
    <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user"</span> <span class="se">\</span>
    <span class="nt">--username</span> <span class="s2">"dev-user"</span>
</code></pre></div></div>

<p>Once this <code class="language-html highlighter-rouge">ClusterRoleBinding</code> is created and the IAM user is mapped in <code class="language-html highlighter-rouge">aws-auth</code>, IAM user <code class="language-html highlighter-rouge">dev-user</code> would be able to get, list, or watch pods in any namespace.</p>

<h3 id="rbac-permissions-with-kubernetes-groups-1">RBAC permissions with Kubernetes Groups</h3>

<p>If we need to give the same set of permissions to multiple users, then instead of creating multiple <code class="language-html highlighter-rouge">ClusterRoleBindings</code>, we can use Kubernetes Groups and attach that group to the users for whom those permissions are required.</p>

<ol>
  <li>
    <p>Create a ClusterRoleBinding to bind Kubernetes Group <code class="language-html highlighter-rouge">developer</code> to cluster role <code class="language-html highlighter-rouge">eks-developer-cluster-role</code>:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
 <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
 <span class="na">metadata</span><span class="pi">:</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">dev-user-group-cluster-role-binding</span>
 <span class="na">subjects</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">Group</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">dev</span>
     <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
 <span class="na">roleRef</span><span class="pi">:</span>
   <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
   <span class="na">name</span><span class="pi">:</span> <span class="s">eks-developer-cluster-role</span>
   <span class="na">apiGroup</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Map IAM user <code class="language-html highlighter-rouge">arn:aws:iam::<span class="nt">&lt;AWS_ACCOUNT_ID&gt;</span>:user/dev-user</code> to Kubernetes user <code class="language-html highlighter-rouge">dev-user</code> with <code class="language-html highlighter-rouge">dev</code> group in <code class="language-html highlighter-rouge">aws-auth</code> configMap:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> eksctl create iamidentitymapping <span class="se">\</span>
   <span class="nt">--cluster</span> iam-auth-cluster <span class="se">\</span>
   <span class="nt">--region</span> us-east-1 <span class="se">\</span>
   <span class="nt">--arn</span> <span class="s2">"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/dev-user"</span> <span class="se">\</span>
   <span class="nt">--username</span> <span class="s2">"dev-user"</span> <span class="se">\</span>
   <span class="nt">--group</span> <span class="s2">"dev"</span>
</code></pre></div>    </div>

    <p>this would create an entry under <code class="language-html highlighter-rouge">mapUsers</code> section in <code class="language-html highlighter-rouge">aws-auth</code> configmap as:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">mapUsers</span><span class="pi">:</span> <span class="pi">|</span>
   <span class="s">- groups:</span>
     <span class="s">- dev</span>
     <span class="s">userarn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/dev-user</span>
     <span class="s">username: dev-user</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="using-mapaccounts-to-map-iam-arn-in-an-aws-account-to-the-cluster">Using mapAccounts to Map IAM ARN in an AWS Account to the Cluster</h2>

<p><code class="language-html highlighter-rouge">mapAccounts</code> allows mapping all the <code class="language-html highlighter-rouge">IAM Users</code> or <code class="language-html highlighter-rouge">IAM Roles</code> of an <strong>AWS account</strong> to the cluster. It accepts the list of AWS Account IDs:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">mapAccounts</span><span class="pi">:</span> <span class="pi">|</span>
  <span class="s">- "&lt;AWS_ACCOUNT_ID_1&gt;"</span>
  <span class="s">- "&lt;AWS_ACCOUNT_ID_2&gt;"</span>
</code></pre></div></div>

<p>After mapping the AWS accounts to the cluster, we can use <strong>Kubernetes User</strong> and <strong>Kubernetes Group</strong> to assign permissions to those IAM entities.</p>

:ET